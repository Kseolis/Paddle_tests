{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let source245b = this.getBinaryValue("source-245-bytes")
let source32kb = this.getBinaryValue("source-32-kb")
let publicKey = this.getBinaryValue("public-key")

@Callable(inv)
func group1() = {
    WriteSet([
        DataEntry("result_none", rsaVerify(NOALG, source245b, this.getBinaryValue("proof_none"), publicKey)),
        DataEntry("result_md5", rsaVerify(MD5, source32kb, this.getBinaryValue("proof_md5"), publicKey)),
        DataEntry("result_sha1", rsaVerify(SHA1, source32kb, this.getBinaryValue("proof_sha1"), publicKey))
    ])
}

@Callable(inv)
func group2() = {
    WriteSet([
        DataEntry("result_sha224", rsaVerify(SHA224, source32kb, this.getBinaryValue("proof_sha224"), publicKey)),
        DataEntry("result_sha256", rsaVerify(SHA256, source32kb, this.getBinaryValue("proof_sha256"), publicKey)),
        DataEntry("result_sha384", rsaVerify(SHA384, source32kb, this.getBinaryValue("proof_sha384"), publicKey)),
        DataEntry("result_sha512", rsaVerify(SHA512, source32kb, this.getBinaryValue("proof_sha512"), publicKey))
    ])
}

@Callable(inv)
func group3() = {
    WriteSet([
        DataEntry("result_sha3-224", rsaVerify(SHA3224, source32kb, this.getBinaryValue("proof_sha3-224"), publicKey)),
        DataEntry("result_sha3-256", rsaVerify(SHA3256, source32kb, this.getBinaryValue("proof_sha3-256"), publicKey)),
        DataEntry("result_sha3-384", rsaVerify(SHA3384, source32kb, this.getBinaryValue("proof_sha3-384"), publicKey)),
        DataEntry("result_sha3-512", rsaVerify(SHA3512, source32kb, this.getBinaryValue("proof_sha3-512"), publicKey))
    ])
}
